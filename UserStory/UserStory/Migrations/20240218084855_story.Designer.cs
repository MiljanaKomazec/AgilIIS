// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserStory.Entities;

#nullable disable

namespace UserStory.Migrations
{
    [DbContext(typeof(UserStoryContext))]
    [Migration("20240218084855_story")]
    partial class story
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UserStory.Models.ModelFunctionality.Functionality", b =>
                {
                    b.Property<Guid>("FunctionalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextFunctionality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserStoryRootId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FunctionalityId");

                    b.HasIndex("UserStoryRootId");

                    b.ToTable("Functionallities");

                    b.HasData(
                        new
                        {
                            FunctionalityId = new Guid("28b2a55a-0f35-41b8-aca2-83a49479369f"),
                            TextFunctionality = "Dodavanje novog korisnika",
                            UserStoryRootId = new Guid("05da16d0-6c28-4206-b770-e458afd0e2d2")
                        },
                        new
                        {
                            FunctionalityId = new Guid("cb553e9d-7594-485e-8449-2d8aa8b2fd68"),
                            TextFunctionality = "Pregled sastanaka",
                            UserStoryRootId = new Guid("3d48c095-a7d0-4f13-96d7-4d694564ec1d")
                        });
                });

            modelBuilder.Entity("UserStory.Models.ModelPP.PrioritetizationParameter", b =>
                {
                    b.Property<Guid>("PrioritetizationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ValueForCustomerPP")
                        .HasColumnType("int");

                    b.HasKey("PrioritetizationParameterId");

                    b.ToTable("PrioritetizationParameters");

                    b.HasData(
                        new
                        {
                            PrioritetizationParameterId = new Guid("83988e22-a297-4158-b829-ef5df2344a3f"),
                            CostPP = 150.60m,
                            ValueForCustomerPP = 10
                        },
                        new
                        {
                            PrioritetizationParameterId = new Guid("1c68a0db-ed8c-446d-a0ba-2f00e9df8c4c"),
                            CostPP = 250.30m,
                            ValueForCustomerPP = 25
                        });
                });

            modelBuilder.Entity("UserStory.Models.ModelTask.TaskE", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FunctionalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextTask")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("FunctionalityId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("51ca50c4-0f5a-48fa-a3d6-84b56c392bd9"),
                            FunctionalityId = new Guid("28b2a55a-0f35-41b8-aca2-83a49479369f"),
                            TextTask = "Validacija podataka novog korisnika"
                        },
                        new
                        {
                            TaskId = new Guid("a869d41e-9647-49a7-9029-5a25b5ce0633"),
                            FunctionalityId = new Guid("cb553e9d-7594-485e-8449-2d8aa8b2fd68"),
                            TextTask = "Implementacija dugmeta za dodavanje sprinta"
                        });
                });

            modelBuilder.Entity("UserStory.Models.ModelUserStory.UserStoryRoot", b =>
                {
                    b.Property<Guid>("UserStoryRootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BacklogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartOfEpic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PrioritetizationParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextUserStory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserStoryRootId");

                    b.HasIndex("PrioritetizationParameterId");

                    b.ToTable("UserStories");

                    b.HasData(
                        new
                        {
                            UserStoryRootId = new Guid("05da16d0-6c28-4206-b770-e458afd0e2d2"),
                            BacklogId = new Guid("937ecfaa-58fe-4ac0-88b3-fa2810c67bfc"),
                            PartOfEpic = "Uptavljanje korisnicima",
                            PrioritetizationParameterId = new Guid("83988e22-a297-4158-b829-ef5df2344a3f"),
                            TextUserStory = "Kao admnistrator zelim dodati novog korisnika."
                        },
                        new
                        {
                            UserStoryRootId = new Guid("3d48c095-a7d0-4f13-96d7-4d694564ec1d"),
                            BacklogId = new Guid("937ecfaa-58fe-4ac0-88b3-fa2810c67bfc"),
                            PartOfEpic = "Planiranje i organizovanje",
                            PrioritetizationParameterId = new Guid("1c68a0db-ed8c-446d-a0ba-2f00e9df8c4c"),
                            TextUserStory = "Kao product owner zelim pogledati predstojece sastanke."
                        });
                });

            modelBuilder.Entity("UserStory.Models.ModelFunctionality.Functionality", b =>
                {
                    b.HasOne("UserStory.Models.ModelUserStory.UserStoryRoot", "UserStoryRoot")
                        .WithMany()
                        .HasForeignKey("UserStoryRootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryRoot");
                });

            modelBuilder.Entity("UserStory.Models.ModelTask.TaskE", b =>
                {
                    b.HasOne("UserStory.Models.ModelFunctionality.Functionality", "Functionallity")
                        .WithMany()
                        .HasForeignKey("FunctionalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Functionallity");
                });

            modelBuilder.Entity("UserStory.Models.ModelUserStory.UserStoryRoot", b =>
                {
                    b.HasOne("UserStory.Models.ModelPP.PrioritetizationParameter", "PrioritetizationParameter")
                        .WithMany()
                        .HasForeignKey("PrioritetizationParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrioritetizationParameter");
                });
#pragma warning restore 612, 618
        }
    }
}
